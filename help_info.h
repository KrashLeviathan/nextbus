#ifndef HELP_INFO_H
# define HELP_INFO_H

#include <string>

std::string help_info =
  "                             nextbus\n"
    "\n"
    "Authors:\n"
    "  - Nathan Karasch (nkarasch@iastate.edu)\n"
    "        Main author. Made this program as a Com S 327 assignment.\n"
    "  - Jeremy Sheaffer (sheaffer@iastate.edu)\n"
    "        Extended his command-line argument parser from the\n"
    "        Com S 327 assignment.\n"
    "  - Mark Lakata (http://stackoverflow.com/users/364818/mark-lakata)\n"
    "        Used his curl/curl.h wrapper solution in the CURLplusplus class\n"
    "        found on http://stackoverflow.com/questions/1011339\n"
    "	/how-do-you-make-a-http-request-with-c\n"
    "\n"
    "  - Description:\n"
    "      This program interfaces with the NextBus API to display NextBus\n"
    "      information for CyRide in Ames, IA. It can return bus route\n"
    "      information in a variety of formats, based on user input of\n"
    "      route, stop, etc. The user is also able to configure the\n"
    "      program so that they can quickly find out the time of the\n"
    "      next bus heading home or the time of the next bus heading\n"
    "      to school/work without having to manually type all the\n"
    "      optional parameters. The program is meant to be extensible\n"
    "      to other bus lines (not just CyRide), but the target for this\n"
    "      assignment is CyRide, so any special implementation needed\n"
    "      for other bus lines was not tested.\n"
    "\n"
    "      The program curls the NextBus information from an http request,\n"
    "      which comes back in XML form. The program parses the XML and\n"
    "      pulls out data that it will show the user. XML data that can\n"
    "      be reasonably cached and referenced later is saved in the\n"
    "      directory $HOME/.nextbus/. The config.nextbus file is also\n"
    "      created and saved there.\n"
    "\n"
    "      The configuration file holds user-specific information, such\n"
    "      as saved routes/stops and current agency (ex: CyRide). It\n"
    "      also holds integers that represent epoch time for last usage\n"
    "      of nextbus and last download of the route configuration for\n"
    "      the given agency. These are used by the program to determine\n"
    "      if it should use the cached information or download new info\n"
    "      from the NextBus API. Using the cached data is obviously\n"
    "      faster, but you also don't want to use data that's too old.\n"
    "      The user can force using online data with the -o|--online\n"
    "      flag or force using cached data with the -c|--cached flag.\n"
    "      Forcing online can be useful if you know the information is\n"
    "      outdated. Forcing cached can be useful if you don't have\n"
    "      internet and want to look at the cached bus schedule\n"
    "      information, which is probably still accurate.\n"
    "\n"
    "      The most practical usage of the program is the saved route/stop\n"
    "      feature. When you're working late into the night on your\n"
    "      Com S 327 assignment and you're ready to go home, just type\n"
    "      `nextbus home` and get bus arrival estimations without ever\n"
    "      having to leave the terminal! Computer Science and Software\n"
    "      Engineering majors at ISU, you're welcome. ;-)\n"
    "\n"
    "  - Getting Started:\n"
    "      First, you need to run the program once with any parameters,\n"
    "      which will force the program to create a new config file.\n"
    "      If you're not a Cyclone, you'll need to run `nextbus -a` to\n"
    "      list the different NextBus agencies, and then set your desired\n"
    "      agency with `nextbus -A <agency>`. Finally, set variables\n"
    "      for home, work, etc. using `nextbus -S <name> <route> <stop>`.\n"
    "      \n"
    "  - Usage:\n"
    "      nextbus [\n"
    "                 [ <save-name-1> <save-name-2> ...           ]\n"
    "                 [ -a | --agencies                           ]\n"
    "                 [ -A | --AgencyStore  <agency>              ]\n"
    "                 [ -c | --cached                             ]\n"
    "                 [ -h | --help                               ]\n"
    "                 [ -m | --minutes      <save-name>           ]\n"
    "                 [ -o | --online                             ]\n"
    "                 [ -p | --predictstop  <stop>                ]\n"
    "                 [ -P | --PredictRoute <route> <stop>        ]\n"
    "                 [ -r | --routes                             ]\n"
    "                 [ -S | --Save         <name> <route> <stop> ]\n"
    "                 [ -s | --schedule     <route>               ]\n"
    "                 [ -l | --liststops    <route>               ]\n"
    "              ]\n"
    "\n"
    "  - Flags/Parameters:\n"
    "\n"
    "      <save-name-1> <save-name-2> ...\n"
    "\n"
    "         Type any of your saved route/stop variables to get\n"
    "	 predictions for that route/stop.\n"
    "\n"
    "	 Example: `nextbus work1 work2`\n"
    "\n"
    "      -a | --agencies\n"
    "\n"
    "         Lists all the agencies serviced by NextBus.\n"
    "\n"
    "      -A | --AgencyStore  <agency>\n"
    "\n"
    "         Stores the given agency as your default agency for\n"
    "	 getting schedules and predictions.\n"
    "\n"
    "      -c | --cached\n"
    "\n"
    "         Forces the program to used cached schedule and route\n"
    "	 information. Doesn't work with predictions, since they\n"
    "	 always need to be up-to-date information. This can be\n"
    "	 useful for getting schedule/route information when\n"
    "	 offline.\n"
    "\n"
    "      -h | --help\n"
    "\n"
    "      	 Displays information from the README about how to use\n"
    "	 the program.\n"
    "\n"
    "      -m | --minutes\n"
    "\n"
    "      	 Gets the predictions for a saved route/stop and displays\n"
    "	 only the minutes until the soonest bus arrives/departs.\n"
    "\n"
    "      -o | --online\n"
    "\n"
    "         Forces the program to pull data from online rather\n"
    "	 than using cached information. Otherwise the program\n"
    "	 will use cached information for schedules and route info\n"
    "	 if the information isn't too old.\n"
    "\n"
    "      -p | --predictstop  <stop>\n"
    "\n"
    "         Shows predictions for all arriving/departing routes\n"
    "	 at a given stop number.\n"
    "\n"
    "	 Example: `nextbus -p 1166`\n"
    "\n"
    "      -P | --PredictRoute <route> <stop>\n"
    "\n"
    "      	 Shows predictions for the given route at the given stop.\n"
    "\n"
    "	 Example: `nextbus -P 2E 1123`\n"
    "\n"
    "      -r | --routes\n"
    "\n"
    "      	 Lists all routes for the current agency.\n"
    "\n"
    "      -S | --Save         <name> <route> <stop>\n"
    "\n"
    "      	 Saves the given route and stop to a variable name that\n"
    "	 can be used with `nextbus <save-name-1> <save-name-2> ...`\n"
    "\n"
    "	 Example: `nextbus -S home 1W 1166`\n"
    "\n"
    "      -s | --schedule     <route>\n"
    "\n"
    "      	 Displays the bus schedule for the given route.\n"
    "\n"
    "	 Example: `nextbus -s 2E`\n"
    "\n"
    "      -l | --liststops    <route>\n"
    "\n"
    "      	 Lists all stops for the given route.\n"
    "\n"
    "	 Example: `nextbus -l 2E`\n";

#endif
